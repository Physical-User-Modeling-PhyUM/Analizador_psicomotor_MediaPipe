cmake_minimum_required(VERSION 3.16)

project(pfg VERSION 0.1 LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(Qt6Test_DIR "/Users/MZT/Qt/6.8.2/macos/lib/cmake/Qt6Test")

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets Test Core)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets Test Core)
find_package(OpenCV REQUIRED)
find_package(nlohmann_json REQUIRED)
find_package(Qt6 REQUIRED COMPONENTS Sql)

# Incluir directorios
include_directories(${Qt6Widgets_INCLUDE_DIRS})
include_directories(${OpenCV_INCLUDE_DIRS})
include_directories(${CMAKE_SOURCE_DIR}/src)
include_directories(/usr/local/opt/sqlite/include)
link_directories(/usr/local/opt/sqlite/lib)


# Definir fuentes del ejecutable principal
set(PROJECT_SOURCES
    src/main.cpp
       src/mainwindow.cpp src/mainwindow.h src/mainwindow.ui

       #core
        src/core/core.cpp.cpp src/core/core.h




       # Profiles
       src/profiles/user.cpp src/profiles/user.h
       src/profiles/client.cpp src/profiles/client.h
       src/profiles/admin.cpp src/profiles/admin.h
       src/profiles/fitnesstrainer.cpp src/profiles/fitnesstrainer.h
       src/profiles/userpreferences.cpp src/profiles/userpreferences.h
       src/profiles/clientprofile.cpp src/profiles/clientprofile.h
       src/profiles/profiles.h

        src/profiles/usermanager.cpp src/profiles/usermanager.h

       # Workouts
       src/workouts/exercise.cpp src/workouts/exercise.h
       src/workouts/exerciseespec.cpp src/workouts/exerciseespec.h
       src/workouts/trainingsesion.cpp src/workouts/trainingsesion.h
       src/workouts/trainingworkout.cpp src/workouts/trainingworkout.h

       src/workouts/trainingmanager.cpp src/workouts/trainingmanager.h

       # Pose
       src/pose/pose.cpp src/pose/pose.h
       src/pose/poseanalyzer.cpp src/pose/poseanalyzer.h
       src/pose/feedback.cpp src/pose/feedback.h
       src/pose/state.cpp src/pose/state.h
       src/pose/statemachine.cpp src/pose/statemachine.h
       src/pose/condition.h
       src/pose/angleconstraint.cpp src/pose/angleconstraint.h
       src/pose/sesionreport.cpp src/pose/sesionreport.h

        src/pose/posemanager.cpp src/pose/posemanager.h


       # Repositories
       src/repositories/userrepository.cpp src/repositories/userrepository.h
       src/repositories/trainingrepository.cpp src/repositories/trainingrepository.h
       src/repositories/metricsrepository.cpp src/repositories/metricsrepository.h

       #DB
       src/db/dbtable.cpp src/db/dbtable.h
        src/db/dbmanager.cpp src/db/dbmanager.h

       # Utils
       src/utils/jsonutils.cpp src/utils/jsonutils.h
       src/utils/imageutils.cpp src/utils/imageutils.h

       # Enums
       src/enums/TypeBDEnum.h
       src/enums/MorfologicalFields.h
       src/enums/MobilityLevelEnum.h
       src/enums/FeedbackModeEnum.h
       src/enums/GenderEnum.h
       src/enums/UserTypeEnum.h
       src/enums/PreferencesFieldEnum.h
       src/enums/GeneralDataEnum.h
       src/enums/FunctionalFieldEnum.h
       src/enums/enums.h
       src/enums/RoMFields.h
       src/enums/MedicalRecordsEnum.h
       src/enums/LifeStyleFields.h
       src/enums/UserFieldEnum.h
       src/enums/ClientProfileDataType.h

       # Otros
       mediapipePy/VideoCapture.py
       config/poseConfig.json
       config/schema.sql

)

# Ejecutable principal

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(pfg MANUAL_FINALIZATION ${PROJECT_SOURCES})
else()
    add_executable(pfg ${PROJECT_SOURCES})
endif()

target_link_libraries(pfg PRIVATE
    Qt${QT_VERSION_MAJOR}::Widgets
    Qt${QT_VERSION_MAJOR}::Core
    Qt${QT_VERSION_MAJOR}::Sql
    nlohmann_json::nlohmann_json
    ${OpenCV_LIBS}
    sqlite3
)



# TESTS como ejecutables separados


enable_testing()  # Habilitar pruebas en CMake

# Test Unitarios (Enlaza con pose.cpp)
add_executable(Test_Unit
    test/unit/testpose.cpp
    src/pose/pose.cpp
    src/utils/jsonutils.cpp
    src/utils/imageutils.cpp
    test/unit/main.cpp
    test/unit/Sqlite3_test.cpp


)
target_link_libraries(Test_Unit PRIVATE
    Qt${QT_VERSION_MAJOR}::Test
    Qt${QT_VERSION_MAJOR}::Widgets
    Qt${QT_VERSION_MAJOR}::Core
    nlohmann_json::nlohmann_json
    ${OpenCV_LIBS}
    sqlite3
)

# Test de Funcionales
add_executable(Test_Functional
    test/unit/testposemanager.cpp
    src/core/posemanager.cpp
    src/pose/pose.cpp
    src/pose/poseanalyzer.cpp
    src/pose/feedback.cpp
)
target_link_libraries(Test_Functional PRIVATE
    Qt${QT_VERSION_MAJOR}::Test
    Qt${QT_VERSION_MAJOR}::Widgets
    Qt${QT_VERSION_MAJOR}::Core
    nlohmann_json::nlohmann_json
    ${OpenCV_LIBS}
    sqlite3
)

# Test Integracion
add_executable(Test_Integration
    test/unit/testposemanager.cpp
    src/pose/pose.cpp
    src/pose/posemanager.cpp
    src/pose/poseanalyzer.cpp
    src/pose/feedback.cpp
)
target_link_libraries(Test_Integration PRIVATE
    Qt${QT_VERSION_MAJOR}::Test
    Qt${QT_VERSION_MAJOR}::Widgets
    Qt${QT_VERSION_MAJOR}::Core
    nlohmann_json::nlohmann_json
    ${OpenCV_LIBS}
    sqlite3
)


# Registrar pruebas en CTest
add_test(NAME PoseTest COMMAND TestPose)
add_test(NAME PoseManagerTest COMMAND TestPoseManager)
add_test(NAME PoseFunctionalTest COMMAND TestPoseFunctional)

# Instalaci√≥n del ejecutable principal
include(GNUInstallDirs)
install(TARGETS pfg
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(pfg)
endif()
